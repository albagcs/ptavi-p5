 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
    La captura consta de 954 paquetes.
 ** ¿Cuánto tiempo dura la captura?
    56.149345 segundos
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
    192.168.1.34, es una IP privada de clase C, he consultado la tabla en internet.


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
    UDP, con un 96.23% de los paquetes frente al 2.10% de TCP. Sí es consistente, pues en una aplicación en tiempo real
    me importa el presente, aunque pierda algunos paquetes, no que me lleguen todos con mucho retardo. 
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
    A parte de TCP y UDP tenemos IP.v4, RTTP, HTTP, SIP, ICMP, ARP, DNS, H.261, CLASSIC-STUN.


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
    Entre los seg 7-9, 13-15, 15-18, 38-41, 54-56.
 ** Y los paquetes con RTP, ¿cuándo se envían?
    Entre los segundos 16 y 39.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
    DNS
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
    80.58.61.250
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
    86.64.162.35
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
    Porque Ekiga en su funcionamiento pide ejecutar también el rDNS para ver
    si esa dirección IP tiene más dominios.


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
    http://ekiga.net/ip/
 ** ¿Qué user agent (UA) la está pidiendo?
    Ekiga
 ** ¿Qué devuelve el servidor?
    La respuesta 200 OK y el contenido de text/html que contiene la dirección IP 83.36.48.212
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
    En mi caso recibo 193.147.49.117, que es la IP pública de la máquina en la que me encuentro.
    Por tanto lo que se hace es mediante HTTP resolver mi IP pública para trabajar con ella.
    El servidor responde la IP pública correspondiente a la privada que hace la petición.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
    Porque SIP no permite establecer la comunicación cuando los extremos se encuentran
    detrás de enrutadores NAT,y STUN permite establecer la conexión.
                    ························
 ** ¿Estamos tras un NAT?
            ···········Sí,por...···········

8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
    86.64.162.35, por el que preguntó el cliente al iniciar la captura.
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
    Al puerto 5060, lo vemos en el apartado del protocolo UDP de la petición SIP:
        Destination port: sip(5060)
 ** ¿Qué método SIP utiliza el UA para registrarse? 
    Method: REGISTER
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
    Allow: INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
    No, recibe el mensaje Status: 401 Unauthorized del servidor.
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
    ·······Si recibimos el código 200 OK del servidor sabemos que el registro··········
    se ha realizado correctamnete.
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
    El paquete del primer intento consta de 513 bytes y el del segundo intento de 712 bytes. El cambio
    es debido a que en el segundo intento se incluye un campo más en el Message Header:
    Authorization: Digest username="grex", realm="ekiga.net", nonce="45a439ee7438aaea43ae8c7c2382922187f86c8b", uri="sip:ekiga.net",               algorithm=md5, response="5267d4e49d707d4443baefa913e8ff90" 
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
    3600 segundos


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
    Sí, en el apartado From de Message Header: Gregorio Robles sip:grex@ekiga.net
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
    La descripción de la sesión, en protocolo SDP versión 0.
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
    No, porque el proxy requiere la identificación del cliente: SIP	744	Status: 407 Proxy 
    Authentication Required··························33
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
    Primero en el número de bytes de ambas peticiones, el primer INVITE consta de 982 bytes mientras
    que el segundo de 1181 bytes, a que el segundo INVITE ya incluye la información requerida por
    el proxy: Proxy-Authorization: Digest username="grex", realm="ekiga.net", nonce="45a439f6ba5f681cd945fb7c40529fd1e0f28a81", uri="sip:500@ekiga.net", algorithm=md5, response="9a5627c14a8a433bd308d2ec54777240"


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
    H.261, que es un estándar ITU-T de compresión de vídeo, RTP, que nos permite la
    transmisión de información en tiempo real, como audio y vídeo, viendo las tramas
    RTP vemos que se codifica audio con el estándar ITU-T G.711 PCMA (8) 
 ** ¿Cuál es el tamaño de paquete de los mismos?
    Las tramas RTP tienen siempre la misma longitud (214bytes) mientras que las
    tramas H.261 varían entre 200-1080 bytes.
 ** ¿Se utilizan bits de padding?
    No, en las diferentes tramas de RTP observamos que no hay bits de padding
    ..0. .... = Padding: False
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
    ···························································
 ** ¿Cuántos bits/segundo estamos enviando?
    ···························································


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
    Vemos que hay dos flujos, como hemos podido observar en las tramas enviamos
    audio y vídeo, por tanto hay un flujo para cada uno.
 ** ¿Cuántos paquetes se pierden?
    Ninguno (0.0%)
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
    Para el flujo de vídeo es 1290.48 ms y para el flujo de audio 1290.44
    El valor de delta es el tiempo transcurrido entre el paquete actual y el paquete anterior, 
    el Max delta es el valor de delta máximo.
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
    Jitter medio :
                Flujo vídeo: 153.24 ms
                Flujo audio: 42.5 ms
    Jitter máximo:
                Flujo vídeo: 183.10 ms
                Flujo audio: 119.64 ms
    ·············································································


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
    Ambos valen 0, es lógico, pues si es el primer paquete que ha llegado no puede comparar
    la diferencia con un paquete anterior y lo mismo con el jitter.
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
    Sí, vemos que a la izquierda nos muestran el número de paquete, vemos que el 113 
    es el primer paquete que nos ha llegado de RTP pero no el primer paquete que nos han 
    enviado de toda la captura.
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
    Hasta el paquete 247
 ** ¿A qué se debe el cambio tan brusco del jitter?
    A que el valor de delta ha aumentado mucho, que es el tiempo transcurrido entre el
    paquete anterior y el actual, por tanto si ha tenido que esperar más, la variación de 
    esa espera (jitter) aumenta.
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
····································································································
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
    ·································································································


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
 ** ¿En qué trama(s)?
 ** ¿Por qué crees que se envía varias veces?


16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
 ** ¿En qué trama sucede esto?
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
